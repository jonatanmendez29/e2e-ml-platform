name: Model API CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: airflow
          POSTGRES_USER: airflow
          POSTGRES_PASSWORD: airflow
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        cd app
        pip install -r requirements.txt
        pip install pytest

    - name: Run tests
      run: |
        cd tests
        python -m pytest test_api.py -v
      env:
        DB_HOST: localhost
        DB_NAME: airflow
        DB_USER: airflow
        DB_PASSWORD: airflow
        DB_PORT: 5432

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: model-api
        IMAGE_TAG: latest
      run: |
        docker build -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.0

    - name: Terraform Init
      run: terraform init
      working-directory: terraform

    - name: Terraform Plan
      run: terraform plan -var="db_host=${{ secrets.DB_HOST }}" -var="db_name=${{ secrets.DB_NAME }}" -var="db_user=${{ secrets.DB_USER }}" -var="db_password=${{ secrets.DB_PASSWORD }}" -var="mlflow_tracking_uri=${{ secrets.MLFLOW_TRACKING_URI }}" -var="vpc_id=${{ secrets.VPC_ID }}" -var="subnet_ids=${{ secrets.SUBNET_IDS }}"
      working-directory: terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve -var="db_host=${{ secrets.DB_HOST }}" -var="db_name=${{ secrets.DB_NAME }}" -var="db_user=${{ secrets.DB_USER }}" -var="db_password=${{ secrets.DB_PASSWORD }}" -var="mlflow_tracking_uri=${{ secrets.MLFLOW_TRACKING_URI }}" -var="vpc_id=${{ secrets.VPC_ID }}" -var="subnet_ids=${{ secrets.SUBNET_IDS }}"
      working-directory: terraform